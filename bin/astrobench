#!/usr/bin/env node

const commander = require('commander')
const { version, description } = require('../package.json')
const run = require('../lib/runner')
const formatToText = require('../lib/formatters/text')
const formatToJSON = require('../lib/formatters/json')

commander
  .version(version)
  .description(description)
  .usage('[options] <URL>')
  .option('-b, --browser <name>', 'web browser to launch', 'chrome')
  .option('-d, --directory <path>', 'root directory to serve from', '.')
  .option('-p, --port <number>', 'port for the server to listen to', 0, totInteger)
  .option('-H, --no-headless', 'show the browser window during the run')
  .option('-S, --no-sandbox', 'pass --no-sandbox to Puppeteer')
  .option('-M, --no-shm', 'pass --disable-dev-shm-usage to Puppeteer')
  .option('-e, --executable', 'set the path to the browser executable')
  .option('-t, --timeout <number>', 'benchmark execution timeout [s]', 60, totInteger)
  .option('-f, --format <type>', 'printed results format', 'text')
  .option('-e, --save-text <file>', 'save results as text')
  .option('-j, --save-json <file>', 'save results as JSON')
  .option('-i, --save-image <file>', 'save PNG screenshot of the page')
  .option('-m, --save-html <file>', 'save HTML markup of the page')
  .option('-r, --error-snapshot <path>', 'save LOG, HTML and PNG snapshots on failure')
  .option('-C, --no-color', 'suppress color output')
  .option('-L, --no-console', 'suppress browser console logging')
  .option('-N, --no-network', 'suppress network request logging')
  .option('-P, --no-progress', 'suppress detailed progress logging')
  .option('-q, --quiet', 'do not print the test results')
  .option('-v, --verbose', 'print progress of the tests')
  .on('--help', () => {
    console.log(`
 Available browsers are "chrome" and "firefox".
 Available formats are "text" and "json".

Examples:

 $ astrobench -vLN examples/index.html
 $ astrobench -CS -f json http://localhost:8080/test.html`)
  })
  .parse(process.argv)

function totInteger (value) {
  return parseInt(value)
}

function validate (condition, message) {
  if (!condition) {
    console.error(message)
    process.exit(1)
  }
}

const url = commander.args[0]
if (!url) {
  commander.help()
}

let {
  browser,
  directory,
  port,
  headless,
  sandbox,
  shm,
  executable,
  timeout,
  format,
  color,
  quiet,
  verbose,
  network,
  console: browserConsole,
  progress,
  saveText,
  saveJson,
  saveImage,
  saveHtml,
  errorSnapshot
} = commander
validate(['chrome', 'firefox'].includes(browser),
  'Browser has to be either "chrome" or "firefox".')
validate(port >= 0 && port <= 65535,
  'Port has to be a number greater or equal to zero.')
validate(timeout > 0 && timeout < 86400,
  'Benchmark timeout has to be a number of seconds greater than zero.')
validate(['text', 'json'].includes(format),
  'Format has to be either "text" or "json".')
if (verbose) {
  verbose = { network, browserConsole, progress }
}

run({
  url,
  browser,
  directory,
  port,
  headless,
  sandbox,
  shm,
  executable,
  timeout,
  color,
  verbose,
  saveText,
  saveJson,
  saveImage,
  saveHtml,
  errorSnapshot
})
  .then(printResults)
  .catch(printError)

function printResults (results) {
  if (verbose) {
    console.log()
  }
  if (!quiet) {
    const output = format === 'json'
      ? formatToJSON(results) : formatToText(results, { color, verbose })
    console.log(output)
  }
}

function printError ({ message, stack }) {
  console.error(verbose ? stack : message)
  process.exitCode = 1
}
